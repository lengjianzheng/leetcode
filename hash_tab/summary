1, 使用哈希表解题，更重要的还是解题的思路。哈希表只是次要的辅助结构体，快速查找而已。
2, 子数组问题，经常的思路是找以i结尾的子数组

红黑树和哈希表:
红黑树：
1, 红黑树是一种基于二叉搜索树的平衡树结构，它保证了在最坏情况下的查找、插入和删除的时间复杂度为O(log n)。
2, 每个节点包括键、值、颜色以及指向父节点、左子节点和右子节点的指针。
3, 由于维护了平衡性质，红黑树的内存占用量相对较高，需要额外的指针来维护树的结构。
哈希表：
1, 哈希表是一种基于散列函数的数据结构，它可以实现快速的查找、插入和删除操作，其平均时间复杂度为O(1)。
2, 哈希表的内存占用量相对较低，它主要包括哈希表本身和存储元素的数组。

为什么通常哈希表比红黑树占的内存少:
虽然哈希表可能会有一些空洞，但在大多数情况下，它们通常会占用相对较少的内存空间，因为数组的大小可以动态调整，以适应实际存储的数据量。
而红黑树在维护平衡的同时需要保持额外的指针，这会导致它们在内存占用方面相对较高。
这并不意味着哈希表总是比红黑树占用更少的内存, 只是通常情况。

红黑树可能更合适的场景：
1, 有序性要求：红黑树是一种有序的数据结构，可以在O(log n)的时间内实现顺序遍历、查找最小值和最大值等操作。
2, 范围查询：红黑树支持高效的范围查询，可以快速找到在某个范围内的元素。
在需要同时保持数据有序性和高性能的场景下，红黑树可能是一个合适的选择。

而哈希表的优势在于：
1, 常数时间复杂度的查找、插入和删除操作：哈希表的平均时间复杂度为O(1)。
2, 内存占用相对较低：相对于红黑树，哈希表的内存占用通常较低。
3, 适合于大数据量的情况：在大规模数据集中，哈希表可能会比平衡树更快。
4, 键的分布较为均匀：当键的分布较为均匀时，哈希表的性能会更好。