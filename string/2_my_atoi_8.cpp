/*
请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
函数 myAtoi(string s) 的算法如下：
1, 读入字符串并丢弃无用的前导空格
2, 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
3, 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
4, 将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
5, 如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
6, 返回整数作为最终结果。
注意：

本题中的空白字符只包括空格字符 ' ' 。
除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。
 

示例 1：

输入：s = "42"
输出：42
解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
第 1 步："42"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
         ^
第 3 步："42"（读入 "42"）
           ^
解析得到整数 42 。
由于 "42" 在范围 [-231, 231 - 1] 内，最终结果为 42 。
*/

#include <string>
#include <vector>
#include <iostream>
#include <sstream>

using namespace std;

/*
解决思路:
1, 一点点实现，主要考察细节实现
*/

class Solution {
public:
    int myAtoi(string s) {
        long res = 0;
        int flag = 1;
        int i = 0;
        // 1, 跳过前面的空格
        while (i < s.size()) {
            if (' ' != s[i]) break;
            ++i;
        }
        // 2, 获得符号
        while (i < s.size()) {
            if ('-' != s[i] && '+' != s[i]) break;
            if ('-' == s[i]) flag = -1;
            ++i;
            break;
        }
        // 3, 获得数字
        while (i < s.size()) {
            if (s[i] < '0' || s[i] > '9') break; // 注意的点
            res = res * 10 + s[i] - '0'; // 注意的点
            if (res > INT_MAX) break;
            ++i;
        }
        res = res * flag;
        if (res > INT_MAX) return INT_MAX;
        if (res < INT_MIN) return INT_MIN;
        return res;
    }
};